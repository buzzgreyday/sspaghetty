#!/bin/bash

TMP_DIR="$HOME/.tmp"
IP_FILE="$HOME/.tmp/last_ip.txt"
DOWNLOAD_LOC="$HOME"
INSTALL_LOC="/usr/local/bin"
NODE_SCRIPT_HOME="$HOME/.node"
DO_TOKEN_FILE="$NODE_SCRIPT_HOME/do_auth_token.enc"
HCLOUD_TOKEN_FILE="$NODE_SCRIPT_HOME/hcloud_auth_token.enc"

NO_FORMAT="\033[0m"
F_BOLD="\033[1m"
F_UNDERLINED="\033[4m"
C_INDIANRED1="\033[38;5;203m"
C_DEEPSKYBLUE3="\033[38;5;32m"
C_YELLOW1="\033[38;5;226m"
C_CHARTREUSE3="\033[38;5;76m"
C_GREY_CENSOR1="\033[38;5;234m"
C_GREY_CENSOR2="\033[48;5;233m"

error_exit() {
  echo -e "  ${C_INDIANRED1}EXITING..."
  echo -e "${NO_FORMAT}"
  exit 1
}

verify_execution() {
  if [ $? -ne 0 ]; then
    echo -e "${C_INDIANRED1}  ${F_UNDERLINED}${2}${NO_FORMAT}"
    error_exit
  else
    echo -e "  ${C_CHARTREUSE3}${1}${NO_FORMAT}"
  fi
}

encode() {
  if [ "$3" == "hcloud" ]; then
    service_provider="HETZNER"
    token_file="$HCLOUD_TOKEN_FILE"
  elif [ "$3" == "doctl" ]; then
    service_provider="DIGITAL OCEAN"
    token_file="$DO_TOKEN_FILE"
  else
    echo -e "${C_INDIANRED1}> ${F_UNDERLINED} \"${3}\" IS NOT A VALID COMMAND${NO_FORMAT}"
    error_exit
  fi
  echo -e "${C_DEEPSKYBLUE3}> ENCODING $service_provider AUTHORIZATION TOKEN${NO_FORMAT}"
  sudo openssl enc -aes-256-cbc -salt -pbkdf2 -out "$token_file" -pass pass:"$2" <<<"$1"
  verify_execution "ENCODING COMPLETE" "ENCODING FAILED"
}

decode() {
  if [ "$2" == "hcloud" ]; then
    service_provider="HETZNER"
    token_file="$HCLOUD_TOKEN_FILE"
  elif [ "$2" == "doctl" ]; then
    service_provider="DIGITAL OCEAN"
    token_file="$DO_TOKEN_FILE"
  else
    echo -e "${C_INDIANRED1}> ${F_UNDERLINED}\"${2}\" IS NOT A VALID COMMAND"
		error_exit
  fi
	echo -e "${C_DEEPSKYBLUE3}> DECODING $service_provider AUTHORIZATION TOKEN${NO_FORMAT}"
	echo -ne "${C_GREY_CENSOR1}${C_GREY_CENSOR2}"
	TOKEN=$(openssl enc -d -aes-256-cbc -in "$token_file" -salt -pbkdf2 -pass pass:"$1")
	verify_execution "DECODING COMPLETE" "DECODING FAILED"
}

hetzner_create_context() {
  # Export the HCLOUD_TOKEN environment variable
  export HCLOUD_TOKEN="$TOKEN"
  # Use expect to handle the interactive part
  echo -ne "${C_GREY_CENSOR1}${C_GREY_CENSOR2}"
  expect << EOF
    set timeout 10
    spawn hcloud context create "Constellation"
    expect {
      "The HCLOUD_TOKEN environment variable is set. Do you want to use the token from HCLOUD_TOKEN for the new context? (Y/n): " { send "Y\r" }
      timeout { exit 1 }
    }
    expect eof
EOF
  verify_execution "TOKEN VERIFICATION COMPLETE" "TOKEN VERIFICATION FAILED"
  unset HCLOUD_TOKEN
}

authenticate() {
  if [ "$1" == "hcloud" ]; then
    service_provider="HETZNER"
    token_file="$HCLOUD_TOKEN_FILE"
  elif [ "$1" == "doctl" ]; then
    service_provider="DIGITAL OCEAN"
    token_file="$DO_TOKEN_FILE"
  else
    echo -e "${C_INDIANRED1}> ${F_UNDERLINED}\"${1}\" IS NOT A VALID COMMAND"
    error_exit
  fi

	if [ -f "$token_file" ]; then
		decode $SSH_PASSWD "$1"
	fi
	if [ -n "$TOKEN" ]; then
		echo -e "${C_DEEPSKYBLUE3}> $service_provider AUTHORIZATION TOKEN VERIFICATION"
    if [ "$1" == "hcloud" ]; then
      hetzner_create_context
		elif [ "$1" == "doctl" ]; then
      # shellcheck disable=SC2091
      doctl auth init -t "$TOKEN" &>/dev/null
      verify_execution "TOKEN VERIFICATION COMPLETE" "TOKEN VERIFICATION FAILED"
    else
      echo -e "${C_INDIANRED1}> ${F_UNDERLINED}\"${1}\" IS NOT A VALID COMMAND"
      error_exit
    fi
	else
		echo -e "${C_INDIANRED1}> ${F_UNDERLINED}NO $service_provider AUTHORIZATION TOKEN FOUND${NO_FORMAT}"
		read -p "  AUTHORIZATION TOKEN: " -s TOKEN
		echo -ne "${C_GREY_CENSOR2}  CENSORED  CENSORED  CENSORED  ${NO_FORMAT}\n"
		obtain_superuser_permissions
		encode "$TOKEN" "$SSH_PASSWD" "$1"
		decode $SSH_PASSWD "$1"
		if [ "$1" == "hcloud" ]; then
		  hetzner_create_context
		elif [ "$1" == "doctl" ]; then
      # shellcheck disable=SC2091
      doctl auth init -t "$TOKEN" &>/dev/null
      verify_execution "TOKEN VERIFICATION COMPLETE" "TOKEN VERIFICATION FAILED"
    else
      echo -e "${C_INDIANRED1}> ${F_UNDERLINED}\"${1}\" IS NOT A VALID COMMAND"
      error_exit
    fi
	fi
	unset $TOKEN
}

whitelist() {
  if [ "$2" == "hcloud" ]; then
    # FIREWALL_NAME presume that you only have one active firewall on Hetzner"
    FIREWALL_NAME=$(hcloud firewall list -o columns=name | tail -n 1)
    verify_execution "FIREWALL NAME REQUEST COMPLETE" "FIREWALL NAME REQUEST FAILED"
    FIREWALL_ID=$(hcloud firewall list | grep "$FIREWALL_NAME" | awk '{print $1}')
    verify_execution "FIREWALL ID REQUEST COMPLETE" "FIREWALL ID REQUEST FAILED"
    if [ -f "$NODE_SCRIPT_HOME/node_ssh_port.txt" ]; then
      NODE_SSH_PORT=$(cat "$NODE_SCRIPT_HOME/node_ssh_port.txt")
    fi
    # Get the current firewall id configuration:
    # hcloud firewall describe ${FIREWALL_ID} -o json | jq . > current_firewall.json
    json_data="[
      {
        \"direction\": \"in\",
        \"protocol\": \"tcp\",
        \"port\": \"${NODE_SSH_PORT}\",
        \"source_ips\": [\"${1}/32\"],
        \"destination_ips\": [],
        \"description\": null
      },
      {
        \"direction\": \"in\",
        \"protocol\": \"tcp\",
        \"port\": \"9000-9001\",
        \"source_ips\": [
          \"0.0.0.0/0\",
          \"::/0\"
          ],
        \"destination_ips\": [],
        \"description\": null
      },
      {
        \"direction\": \"in\",
        \"protocol\": \"tcp\",
        \"port\": \"9010-9011\",
        \"source_ips\": [
          \"0.0.0.0/0\",
          \"::/0\"
          ],
        \"destination_ips\": [],
        \"description\": null
      },
      {
        \"direction\": \"out\",
        \"source_ips\": [],
        \"destination_ips\": [
          \"0.0.0.0/0\",
          \"::/0\"
          ],
        \"protocol\": \"tcp\",
        \"port\": \"any\",
        \"description\": null
      },
      {
        \"direction\": \"out\",
        \"source_ips\": [],
        \"destination_ips\": [
          \"0.0.0.0/0\",
          \"::/0\"
          ],
        \"protocol\": \"udp\",
        \"port\": \"any\",
        \"description\": null
      },
      {
        \"direction\": \"out\",
        \"source_ips\": [],
        \"destination_ips\": [
          \"0.0.0.0/0\",
          \"::/0\"
          ],
        \"protocol\": \"icmp\",
        \"port\": null,
        \"description\": null
      }
    ]"
    # Write JSON to file
    echo "${json_data}" > "${TMP_DIR}/hetzner_firewall_rules.json"
    echo -ne "${C_GREY_CENSOR1}${C_GREY_CENSOR2}"
    hcloud firewall replace-rules "${FIREWALL_ID}" --rules-file "${TMP_DIR}/hetzner_firewall_rules.json" --quiet
    verify_execution "FIREWALL UPDATE COMPLETE" "FIREWALL UPDATE FAILED"
    unset FIREWALL_NAME FIREWALL_ID
    rm -f "${TMP_DIR}/hetzner_firewall_rules.json"
    remove_cli_authorization "$2"
  else
    # Update firewall with CURRENT_IP using doctl
    if ! FIREWALL_DATA=$(doctl compute firewall list); then
      echo -e "${C_INDIANRED1}> ${F_UNDERLINED}FIREWALL DATA REQUEST FAILED"
      error_exit
    fi
    FIREWALL_NAME=$(echo "$FIREWALL_DATA" | awk 'NR==2{print $2}')
    FIREWALL_ID=$(echo "$FIREWALL_DATA" | awk 'NR==2{print $1}')
    if [ -f "$NODE_SCRIPT_HOME/node_ssh_port.txt" ]; then
      NODE_SSH_PORT=$(cat "$NODE_SCRIPT_HOME/node_ssh_port.txt")
    fi
    doctl compute firewall update "$FIREWALL_ID" --name "$FIREWALL_NAME" --inbound-rules "protocol:tcp,ports:${NODE_SSH_PORT},address:${1}/32 protocol:tcp,ports:9000-9001,address:0.0.0.0/0 protocol:tcp,ports:9010-9011,address:0.0.0.0/0" --outbound-rules "protocol:tcp,ports:all,address:0.0.0.0/0 protocol:udp,ports:all,address:0.0.0.0/0 protocol:icmp,address:0.0.0.0/0" > /dev/null 2>&1
    verify_execution "FIREWALL UPDATE COMPLET" "FIREWALL UPDATE FAILED"
  fi
	remove_cli_authorization "$2"
}

check_ip() {
	if check_network_connection; then
		# Fetch current IP address
		if ! CURRENT_IP=$(curl -s http://ipv4.icanhazip.com/); then
			echo -e "${C_INDIANRED1}> ${F_UNDERLINED}OBTAINING IP FAILED"
			error_exit
		fi
	else
		echo -e "${C_INDIANRED1}> ${F_UNDERLINED}NO INTERNET CONNECTION"
		error_exit
	fi
	if [ ! -d "$TMP_DIR" ]; then
		mkdir "$TMP_DIR"
	fi
	if [ -f "$IP_FILE" ]; then
		# Read last known IP from file
		LAST_IP=$(cat "$IP_FILE")
		# Compare current IP with last known IP
		if [ "$CURRENT_IP" != "$LAST_IP" ]; then
			echo -e "${C_YELLOW1}> ${F_UNDERLINED}IP HAS CHANGED${NO_FORMAT}"
			echo -e "  ${C_YELLOW1}PLEASE WAIT, UPDATING FIREWALL RULES"
			echo
			whitelist "$CURRENT_IP" "${1}"
			# If succesful update the last IP file
			echo "$CURRENT_IP" >"$IP_FILE"
		else
			echo -e "${C_CHARTREUSE3}> ${F_UNDERLINED}IP REMAINS UNCHANGED${NO_FORMAT}"
			echo -e "  ${C_CHARTREUSE3}CONTINUING WITHOUT UPDATING FIREWALL RULES"
			echo
			remove_cli_authorization "${1}"
		fi
	else
		echo -e "${C_DEEPSKYBLUE3}> ${F_UNDERLINED}SAVING CURRENT IP${NO_FORMAT}"
		echo "$CURRENT_IP" >"$IP_FILE"
		echo -e "  ${C_YELLOW1}PLEASE WAIT, UPDATING FIREWALL RULES"
		echo
		whitelist "$CURRENT_IP" "${1}"
	fi
}

check_network_connection() {
	if ping -c 1 8.8.8.8 &>/dev/null; then
		return 0
	else
		return 1
	fi
}

obtain_superuser_permissions() {
	echo -e "${C_YELLOW1}> OBTAIN SUPERUSER PERMISSIONS${NO_FORMAT}"
	echo -ne "${C_GREY_CENSOR2}  CENSORED  CENSORED  CENSORED  ${NO_FORMAT}\n"
	sudo ls /root &>/dev/null
}

request_ssh_pass() {
	echo -e "${C_DEEPSKYBLUE3}> ${F_UNDERLINED}SSH IDENTITY PASSWORD:${NO_FORMAT}"
	read -p "  " -s SSH_PASSWD
	echo -ne "${C_GREY_CENSOR2}  CENSORED  CENSORED  CENSORED  ${NO_FORMAT}\n"
}

remove_cli_authorization() {
  if [ "$1" == "hcloud" ]; then
    echo -e "${C_GREY_CENSOR1}${C_GREY_CENSOR2}"
    hcloud context delete "Constellation" 2>/dev/null
    verify_execution "HETZNER CONTEXT DELETION COMPLETE" "HETZNER CONTEXT DELETION FAILED"
    unset HCLOUD_TOKEN
  elif [ "$1" == "doctl" ]; then
    doctl auth remove --context default 2>/dev/null
    verify_execution "DIGITAL OCEAN CONTEXT DELETION COMPLETE" "DIGITAL OCEAN CONTEXT DELETION FAILED"
  else
    echo -e "${C_INDIANRED1}> ${F_UNDERLINED}\"${1}\" IS NOT A VALID COMMAND"
    error_exit
  fi

}

install_cli() {
	if [ ! -d "$NODE_SCRIPT_HOME" ]; then
		sudo mkdir -p "$NODE_SCRIPT_HOME"
	fi
	if [ "$1" == "hcloud" ]; then
	  service_provider="HETZNER"
	  echo -e "${C_DEEPSKYBLUE3}> DOWNLOADING ${service_provider} CLI"
	  LATEST_CLI_VERSION="$(curl -s https://api.github.com/repos/hetznercloud/cli/releases/latest | grep browser_download_url | cut -d '"' -f 4 | grep "linux-amd64.tar.gz")"

	elif [ "$1" == "doctl" ]; then
	  service_provider="DIGITAL OCEAN"
    echo -e "${C_DEEPSKYBLUE3}> DOWNLOADING ${service_provider} CLI"
    LATEST_CLI_VERSION="$(curl -s https://api.github.com/repos/digitalocean/doctl/releases/latest | grep browser_download_url | cut -d '"' -f 4 | grep "linux-amd64.tar.gz")"
  else
    echo -e "${C_INDIANRED1}> ${F_UNDERLINED}\"${1}\" IS NOT A COMMAND"
    error_exit
  fi
  verify_execution "${service_provider} CLOUD CLI VERSION REQUEST COMPLETE" "${service_provider} CLOUD CLI VERSION REQUEST FAILED"
  wget -q "$LATEST_CLI_VERSION" -P "$DOWNLOAD_LOC"
  verify_execution "${service_provider} CLI DOWNLOAD FAILED" "${service_provider} CLI DOWNLOAD FAILED"
  echo -e "${C_DEEPSKYBLUE3}> INSTALLING ${service_provider} CLI"
  echo
  obtain_superuser_permissions
  echo -ne "${C_GREY_CENSOR1}${C_GREY_CENSOR2}"
  sudo tar xf "${DOWNLOAD_LOC}/$(basename "${LATEST_CLI_VERSION}")" -C "${INSTALL_LOC}"
  verify_execution "${service_provider} CLI DOWNLOAD COMPLETE" "${service_provider} CLI EXTRACTION FAILED"
  sudo chmod +x "$INSTALL_LOC/${1}"
  rm "${DOWNLOAD_LOC}/$(basename "$LATEST_CLI_VERSION")"
  echo -ne "${NO_FORMAT}"
  request_ssh_pass
  echo -ne "${C_GREY_CENSOR1}${C_GREY_CENSOR2}"
  sudo apt install expect
  echo -ne "${NO_FORMAT}"
  authenticate "$1"
  unset SSH_PASSWD
  node_values "${1}"
  remove_cli_authorization "${1}"
  echo -e "${C_CHARTREUSE3}> INSTALLATION COMPLETE${NO_FORMAT}"
  echo
}

uninstall() {
  if [ "$1" == "hcloud" ]; then
    service_provider="HETZNER"
  elif [ "$1" == "doctl" ]; then
    service_provider="DIGITAL OCEAN"
  else
    echo -e "${C_INDIANRED1}> ${F_UNDERLINED}\"${1}\" IS NOT A VALID COMMAND${NO_FORMAT}"
    error_exit
  fi
	echo -e "${C_DEEPSKYBLUE3}> UNINSTALLING"
	echo "  REMOVING STORED IP DATA"
	rm -f "$IP_FILE"
	echo "  REMOVING $service_provider CLI INSTALLATION"
	echo
	remove_cli_authorization "${1}"
	obtain_superuser_permissions
	sudo rm -f "$INSTALL_LOC/${1}"
	sudo rm -rf "$NODE_SCRIPT_HOME"
	sudo apt remove expect
	echo -e "${C_DEEPSKYBLUE3}> ${F_UNDERLINED}UNINSTALL COMPLETE${NO_FORMAT}"
	echo
	exit 0
}

node_values() {
	if [ -f "$NODE_SCRIPT_HOME/node_ip.txt" ]; then
		NODE_IP=$(cat "$NODE_SCRIPT_HOME/node_ip.txt")
	fi
	if [ -f "$NODE_SCRIPT_HOME/node_ssh_port.txt" ]; then
		NODE_SSH_PORT=$(cat "$NODE_SCRIPT_HOME/node_ssh_port.txt")
	fi
	if [ -f "$NODE_SCRIPT_HOME/node_ssh_id.txt" ]; then
		NODE_SSH_ID=$(cat "$NODE_SCRIPT_HOME/node_ssh_id.txt")
	fi
	if [ -f "$NODE_SCRIPT_HOME/node_user.txt" ]; then
		DROPLET_USER=$(cat "$NODE_SCRIPT_HOME/node_user.txt")
	fi
	if [ ! -n "$NODE_IP" ]; then
		obtain_superuser_permissions
		echo "> NO NODE IP SET"
		read -p "  NODE IP: " NODE_IP
		echo
		echo "$NODE_IP" | sudo tee "$NODE_SCRIPT_HOME/node_ip.txt" &>/dev/null
	fi
	if [ ! -n "$NODE_SSH_PORT" ]; then
		obtain_superuser_permissions
		echo "> NO NODE SSH PORT SET"
		read -p "  NODE SSH PORT: " NODE_SSH_PORT
		echo
		echo "$NODE_SSH_PORT" | sudo tee "$NODE_SCRIPT_HOME/node_ssh_port.txt" &>/dev/null
	fi
	if [ ! -n "$NODE_SSH_ID" ]; then
		obtain_superuser_permissions
		echo "> NO NODE SSH IDENTITY FILE PATH SET"
		read -p "  FULL PATH TO SSH IDENTITY FILE [e.g. $HOME/.ssh/id_rsa]: " NODE_SSH_ID
		echo
		echo "$NODE_SSH_ID" | sudo tee "$NODE_SCRIPT_HOME/node_ssh_id.txt" &>/dev/null
	fi
	if [ ! -n "$DROPLET_USER" ]; then
		obtain_superuser_permissions
		echo "> NO NODE USERNAME SET"
		read -p "  NODE USERNAME [nodeadmin]: " DROPLET_USER
		echo
		echo "$DROPLET_USER" | sudo tee "$NODE_SCRIPT_HOME/node_user.txt" &>/dev/null
	fi
}

# Function to escape special characters in a string
escape_string() {
  local input="$1"
  local escaped=""

  # Iterate over each character in the string
  for (( i=0; i<${#input}; i++ )); do
    char="${input:i:1}"
    case "$char" in
      '!'|'$'|'&'|'*'|'('|')'|'['|']'|'{'|'}'|'\\')
        escaped+="\\$char"
        ;;
      *)
        escaped+="$char"
        ;;
    esac
  done

  echo "$escaped"
}

connect() {
  if [[ ! -f ${NODE_SSH_ID} ]]; then
    echo -e "${C_INDIANRED1}> ${F_UNDERLINED}SSH KEY \"${NODE_SSH_ID}\" NOT FOUND"
    exit 1
  fi
	node_values
	SSH_PASSWD=$(escape_string "$SSH_PASSWD")
	echo -ne "${C_GREY_CENSOR1}${C_GREY_CENSOR2}"
	expect << EOF
    set timeout 10
    spawn ssh -i ${NODE_SSH_ID} ${DROPLET_USER}@${NODE_IP} -p ${NODE_SSH_PORT}
    expect {
      "Enter passphrase" { send "${SSH_PASSWD}\r" }
      "Are you sure you want to continue connecting " { send "yes\r" }
      timeout { exit 1 }
    }
    expect eof
EOF

}

echo -ne "${C_DEEPSKYBLUE3}${F_BOLD}"
cat <<EOF
  #######################################
  #    SSPAGHETTY   NODE   CONNECTOR    #
  #######################################
  Hetzner and Digital Ocean supported
  v0.6 by buzzgreyday (aka. hgtp_Michael)
  ---------------------------------------
EOF

# Example process to run (replace with your actual command)
example_process() {
    sleep 10 # Simulate a process running for 10 seconds
}

echo -ne "${NO_FORMAT}"
case "${1}" in
"uninstall") uninstall "${2}";;
"install")
	if check_network_connection; then
		install_cli "${2}"
	else
		echo -e "${C_INDIANRED1}> ${F_UNDERLINED}NO INTERNET CONNECTION"
		error_exit
	fi
	;;
"connect")
	if check_network_connection; then
		request_ssh_pass
		authenticate "${2}"
		check_ip "${2}"
		connect
		unset SSH_PASSWD
		remove_cli_authorization "${2}"
	else
		echo -e "${C_INDIANRED1}> ${F_UNDERLINED}NO INTERNET CONNECTION"
		error_exit
	fi
	;;
*)
	echo -e "${C_INDIANRED1}> ${F_UNDERLINED}NOT A VALID COMMAND"
	error_exit
	;;
esac
