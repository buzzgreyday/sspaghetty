#!/bin/bash

TMP_DIR="$HOME/.tmp"
IP_FILE="$HOME/.tmp/last_ip.txt"
DOWNLOAD_LOC="$HOME"
INSTALL_LOC="/usr/local/bin"
NODE_SCRIPT_HOME="$HOME/.node"
DO_TOKEN_FILE="$NODE_SCRIPT_HOME/do_auth_token.enc"
HCLOUD_TOKEN_FILE="$NODE_SCRIPT_HOME/hcloud_auth_token.enc"

NO_FORMAT="\033[0m"
F_BOLD="\033[1m"
F_UNDERLINED="\033[4m"
C_INDIANRED1="\033[38;5;203m"
C_DEEPSKYBLUE3="\033[38;5;32m"
C_YELLOW1="\033[38;5;226m"
C_CHARTREUSE3="\033[38;5;76m"

encode() {
  if [ "$3" == "hcloud" ]; then
    service_provider="HETZNER"
    token_file="$HCLOUD_TOKEN_FILE"
  elif [ "$3" == "doctl" ]; then
    service_provider="DIGITAL OCEAN"
    token_file="$DO_TOKEN_FILE"
  else
    echo -e "${C_INDIANRED1}> ${F_UNDERLINED}ENCODING FAILED: ${3} IS NOT A VALID COMMAND${NO_FORMAT}"
    echo "  ${C_INDIANRED1}EXITING..."
    echo -e "${NO_FORMAT}"
    exit 1
  fi
  echo "> ENCODING $service_provider AUTHORIZATION TOKEN"
  if ! sudo openssl enc -aes-256-cbc -salt -pbkdf2 -out "$NODE_SCRIPT_HOME/$token_file" -pass pass:"$2" <<<"$1"; then
    echo -e "${C_INDIANRED1}> ${F_UNDERLINED}ENCODING FAILED${NO_FORMAT}"
    echo "  ${C_INDIANRED1}EXITING..."
    echo -e "${NO_FORMAT}"
    exit 1
  fi
  echo -e "  ${C_CHARTREUSE3}ENCODING COMPLETE!"
  echo -e "${NO_FORMAT}"
}

decode() {
  if [ "$2" == "hcloud" ]; then
    service_provider="HETZNER"
    token_file="$HCLOUD_TOKEN_FILE"
  elif [ "$2" == "doctl" ]; then
    service_provider="DIGITAL OCEAN"
    token_file="$DO_TOKEN_FILE"
  else
    echo -e "${C_INDIANRED1}> ${F_UNDERLINED}DECODING FAILED: ${2} IS NOT A VALID COMMAND${NO_FORMAT}"
		echo -e "  ${C_INDIANRED1}EXITING..."
		echo -e "${NO_FORMAT}"
		exit 1
  fi
	echo "> DECODING $service_provider AUTHORIZATION TOKEN"
	if ! TOKEN=$(openssl enc -d -aes-256-cbc -in "$NODE_SCRIPT_HOME/$token_file" -salt -pbkdf2 -pass pass:"$1"); then
		echo -e "${C_INDIANRED1}> ${F_UNDERLINED}DECODING FAILED${NO_FORMAT}"
		echo -e "  ${C_INDIANRED1}EXITING..."
		echo -e "${NO_FORMAT}"
		exit 1
	fi
	echo -e "  ${C_CHARTREUSE3}DECODING COMPLETE!"
	echo -e "${NO_FORMAT}"
}

authenticate() {
  if [ "$1" == "hcloud" ]; then
    service_provider="HETZNER"
    token_file="$HCLOUD_TOKEN_FILE"
  elif [ "$1" == "doctl" ]; then
    service_provider="DIGITAL OCEAN"
    token_file="$DO_TOKEN_FILE"
  else
    echo -e "${C_INDIANRED1}> ${F_UNDERLINED}${1}: NOT A VALID COMMAND! ${NO_FORMAT}"
    echo -e "  ${C_INDIANRED1}EXITING..."
		echo -e "${NO_FORMAT}"
    exit 1
  fi

	if [ -f "$token_file" ]; then
		decode $SSH_PASSWD "$1"
	fi
	if [ -n "$TOKEN" ]; then
		echo "> $service_provider AUTHORIZATION TOKEN VERIFICATION"
		echo
		if [ "$1" == "hcloud" ]; then
		  # Write the Hetzner logic here
		  # shellcheck disable=SC2091
		  if ! $(HCLOUD_TOKEN="${TOKEN}" hcloud context create sspaghetty-node <<<"Y"); then
		    # "sspaghetty-node" should be the project name in Hetzner
		    echo -e "${C_INDIANRED1}> ${F_UNDERLINED}TOKEN VERIFICATION FAILED!"
        echo -e "${NO_FORMAT}"
        exit 1
      fi
		elif [ "$1" == "doctl" ]; then
      # shellcheck disable=SC2091
      if ! $(doctl auth init -t "$TOKEN" &>/dev/null); then
        echo -e "${C_INDIANRED1}> ${F_UNDERLINED}TOKEN VERIFICATION FAILED!"
        echo -e "${NO_FORMAT}"
        exit 1
      fi
    else
      echo -e "${C_INDIANRED1}> ${F_UNDERLINED}${1}: NOT A VALID COMMAND! ${NO_FORMAT}"
      echo -e "  ${C_INDIANRED1}EXITING..."
		  echo -e "${NO_FORMAT}"
      exit 1
    fi
	else
		echo -e "${C_INDIANRED1}> ${F_UNDERLINED}NO $service_provider AUTHORIZATION TOKEN FOUND!${NO_FORMAT}"
		read -p "  AUTHORIZATION TOKEN: " -s TOKEN
		echo -ne "                       "
		obtain_superuser_permissions
		encode "$TOKEN" "$SSH_PASSWD" "$1"
		decode $SSH_PASSWD "$1"
		if [ "$1" == "hcloud" ]; then
		  # shellcheck disable=SC2091
		  if ! $(HCLOUD_TOKEN="${TOKEN}" hcloud context create sspaghetty-node <<<"Y"); then
		    # "sspaghetty-node" should be the project name in Hetzner
		    echo -e "${C_INDIANRED1}> ${F_UNDERLINED}TOKEN VERIFICATION FAILED!"
        echo -e "${NO_FORMAT}"
        exit 1
      fi
		elif [ "$1" == "doctl" ]; then
      # shellcheck disable=SC2091
      if ! $(doctl auth init -t "$TOKEN" &>/dev/null); then
        echo -e "${C_INDIANRED1}> ${F_UNDERLINED}TOKEN VERIFICATION FAILED!"
        echo -e "${NO_FORMAT}"
        exit 1
      fi
    else
      echo -e "${C_INDIANRED1}> ${F_UNDERLINED}${1}: NOT A VALID COMMAND! ${NO_FORMAT}"
      echo -e "  ${C_INDIANRED1}EXITING..."
		  echo -e "${NO_FORMAT}"
      exit 1
    fi
	fi
	unset $TOKEN
}

whitelist() {
  if [ "$2" == "hcloud" ]; then
    # FIREWALL_NAME="my-firewall-name"
    if ! FIREWALL_NAME=$(hcloud firewall list -o columns=name,noheader | head -n 1); then
      # Will take the first name in the list, otherwise this would need configuration at installation
      echo -e "${C_INDIANRED1}> ${F_UNDERLINED}FIREWALL NAME REQUEST FAILED!"
      echo "  EXITING..."
      echo -e "${NO_FORMAT}"
      exit 1
    fi
    if ! FIREWALL_DATA=$(hcloud firewall list | grep "$FIREWALL_NAME" | awk '{print $1}'); then
      echo -e "${C_INDIANRED1}> ${F_UNDERLINED}FIREWALL DATA REQUEST FAILED!"
      echo "  EXITING..."
      echo -e "${NO_FORMAT}"
      exit 1
    fi
    FIREWALL_ID=$(echo "$FIREWALL_DATA" | grep "$FIREWALL_NAME" | awk '{print $1}')
    echo "${FIREWALL_DATA}"
    if [ -f "$NODE_SCRIPT_HOME/node_ssh_port.txt" ]; then
      NODE_SSH_PORT=$(cat "$NODE_SCRIPT_HOME/node_ssh_port.txt")
    fi
    echo "[
      {
        \"direction\": \"in\",
        \"protocol\": \"tcp\",
        \"port\": \"${NODE_SSH_PORT}\",
        \"source_ips\": [\"${1}/32\"]
      },
      {
        \"direction\": \"in\",
        \"protocol\": \"tcp\",
        \"port\": \"9000-9001\",
        \"source_ips\": [\"0.0.0.0/0\"]
      },
      {
        \"direction\": \"in\",
        \"protocol\": \"tcp\",
        \"port\": \"9010-9011\",
        \"source_ips\": [\"0.0.0.0/0\"]
      },
      {
        \"direction\": \"out\",
        \"protocol\": \"tcp\",
        \"port\": \"any\",
        \"destination_ips\": [\"0.0.0.0/0\"]
      },
      {
        \"direction\": \"out\",
        \"protocol\": \"udp\",
        \"port\": \"any\",
        \"destination_ips\": [\"0.0.0.0/0\"]
      },
      {
        \"direction\": \"out\",
        \"protocol\": \"icmp\",
        \"destination_ips\": [\"0.0.0.0/0\"]
      }
    ]" > "${NODE_SCRIPT_HOME}/hetzner_firewall_rules.json"
    hcloud firewall update-rules "${FIREWALL_DATA}" --rules-from-file "${NODE_SCRIPT_HOME}/hetzner_firewall_rules.json"
    rm -f "${NODE_SCRIPT_HOME}/hetzner_firewall_rules.json"
    remove_cli_authorization "$2"
  else
    # Update firewall with CURRENT_IP using doctl
    if ! FIREWALL_DATA=$(doctl compute firewall list); then
      echo -e "${C_INDIANRED1}> ${F_UNDERLINED}FIREWALL DATA REQUEST FAILED!"
      echo "  EXITING..."
      echo -e "${NO_FORMAT}"
      exit 1
    fi
    FIREWALL_NAME=$(echo "$FIREWALL_DATA" | awk 'NR==2{print $2}')
    FIREWALL_ID=$(echo "$FIREWALL_DATA" | awk 'NR==2{print $1}')
    if [ -f "$NODE_SCRIPT_HOME/node_ssh_port.txt" ]; then
      NODE_SSH_PORT=$(cat "$NODE_SCRIPT_HOME/node_ssh_port.txt")
    fi
    if ! doctl compute firewall update "$FIREWALL_ID" --name "$FIREWALL_NAME" --inbound-rules "protocol:tcp,ports:${NODE_SSH_PORT},address:${1}/32 protocol:tcp,ports:9000-9001,address:0.0.0.0/0 protocol:tcp,ports:9010-9011,address:0.0.0.0/0" --outbound-rules "protocol:tcp,ports:all,address:0.0.0.0/0 protocol:udp,ports:all,address:0.0.0.0/0 protocol:icmp,address:0.0.0.0/0" > /dev/null 2>&1; then
      echo -e "${C_INDIANRED1}> ${F_UNDERLINED}FIREWALL UPDATE FAILED!"
      echo "  EXITING..."
      echo -e "${NO_FORMAT}"
      exit 1
    fi
  fi
	remove_cli_authorization "$2"
}

check_ip() {
	if check_network_connection; then
		# Fetch current IP address
		if ! CURRENT_IP=$(curl -s http://ipv4.icanhazip.com/); then
			echo -e "${C_INDIANRED1}> ${F_UNDERLINED}OBTAINING IP FAILED!"
			echo "  EXITING..."
			echo -e "${NO_FORMAT}"
			exit 1
		fi
	else
		echo -e "${C_INDIANRED1}> ${F_UNDERLINED}NO INTERNET CONNECTION!"
		echo "  COULD NOT RETRIEVE YOUR CURRENT IP. EXITING..."
		echo -e "${NO_FORMAT}"
		exit 1
	fi
	if [ ! -d "$TMP_DIR" ]; then
		mkdir "$TMP_DIR"
	fi
	if [ -f "$IP_FILE" ]; then
		# Read last known IP from file
		LAST_IP=$(cat "$IP_FILE")
		# Compare current IP with last known IP
		if [ "$CURRENT_IP" != "$LAST_IP" ]; then
			echo -e "${C_YELLOW1}> ${F_UNDERLINED}IP HAS CHANGED${NO_FORMAT}"
			echo -e "  ${C_YELLOW1}UPDATING FIREWALL RULES..."
			echo
			whitelist "$CURRENT_IP" "${1}"
			# If succesful update the last IP file
			echo "$CURRENT_IP" >"$IP_FILE"
		else
			echo "> IP REMAINS UNCHANGED"
			echo "  CONTINUING WITHOUT UPDATING FIREWALL RULES..."
			echo
			remove_cli_authorization "${1}"
		fi
	else
		echo "> SAVING CURRENT IP"
		echo "$CURRENT_IP" >"$IP_FILE"
		echo "  UPDATING FIREWALL RULES..."
		echo
		whitelist "$CURRENT_IP" "${1}"
	fi
}

check_network_connection() {
	if ping -c 1 8.8.8.8 &>/dev/null; then
		return 0 # Success
	else
		return 1 # Failure
	fi
}

obtain_superuser_permissions() {
	echo -e "${C_YELLOW1}> OBTAIN SUPERUSER PERMISSIONS"
	echo -ne " "
	sudo ls /root &>/dev/null
	echo -e "${NO_FORMAT}"
}

request_ssh_pass() {
	echo "> SSH IDENTITY PASSWORD:"
	read -p "  " -s SSH_PASSWD
	echo
}

remove_cli_authorization() {
  if [ "$1" == "hcloud" ]; then
    if ! hcloud context delete "sspaghetty-node"; then
      unset HCLOUD_TOKEN
      echo -e "${C_INDIANRED1}> ${F_UNDERLINED}HETZNER AUTHORIZATION REMOVAL FAILED"
      echo "  EXITING..."
      echo -e "${NO_FORMAT}"
      exit 1
    fi
    unset HCLOUD_TOKEN
  elif [ "$1" == "doctl" ]; then
    if ! doctl auth remove --context default &>/dev/null; then
      echo -e "${C_INDIANRED1}> ${F_UNDERLINED}DIGITAL OCEAN AUTHORIZATION REMOVAL FAILED"
      echo "  EXITING..."
      echo -e "${NO_FORMAT}"
      exit 1
    fi
  else
    echo -e "${C_INDIANRED1}> ${F_UNDERLINED}AUTHORIZATION REMOVAL FAILED: ${1} IS NOT A VALID COMMAND"
    echo "  EXITING..."
    echo -e "${NO_FORMAT}"
    exit 1
  fi

}

install_cli() {
	if [ ! -d "$NODE_SCRIPT_HOME" ]; then
		sudo mkdir -p "$NODE_SCRIPT_HOME"
	fi
	if [ "$1" == "hcloud" ]; then
	  service_provider="HETZNER"
	  echo "> DOWNLOADING ${service_provider} CLI"
	  if ! LATEST_CLI_VERSION="$(curl -s https://api.github.com/repos/hetznercloud/cli/releases/latest | grep browser_download_url | cut -d '"' -f 4 | grep "linux-amd64.tar.gz")"; then
	    echo -e "${C_INDIANRED1}> ${F_UNDERLINED}${service_provider} CLOUD CLI VERSION REQUEST FAILED!"
      echo "  EXITING..."
      echo -e "${NO_FORMAT}"
      exit 1
    fi
	elif [ "$1" == "doctl" ]; then
	  service_provider="DIGITAL OCEAN"
    echo "> DOWNLOADING ${service_provider} CLI"
    if ! LATEST_CLI_VERSION="$(curl -s https://api.github.com/repos/digitalocean/doctl/releases/latest | grep browser_download_url | cut -d '"' -f 4 | grep "linux-amd64.tar.gz")"; then
      echo -e "${C_INDIANRED1}> ${F_UNDERLINED}${service_provider} CLI VERSION REQUEST FAILED!"
      echo "  EXITING..."
      echo -e "${NO_FORMAT}"
      exit 1
    fi
  else
    echo -e "${C_INDIANRED1}> ${F_UNDERLINED}${1}: NOT A COMMAND!"
    exit 1
  fi
  # shellcheck disable=SC2091
  if ! $(wget -q "$LATEST_CLI_VERSION" -P "$DOWNLOAD_LOC"); then
    echo "> ${service_provider} CLI DOWNLOAD FAILED"
    echo "  EXITING..."
    echo
    exit 1
  fi
  echo "> INSTALLING ${service_provider} CLI"
  echo
  echo "${DOWNLOAD_LOC}/$(basename "${LATEST_CLI_VERSION}")"
  obtain_superuser_permissions
  if ! sudo tar xf "${DOWNLOAD_LOC}/$(basename "${LATEST_CLI_VERSION}")" -C "${INSTALL_LOC}"; then
    echo "> ${service_provider} CLI EXTRACTION FAILED"
    echo "  EXITING..."
    echo
    exit 1
  fi
  # sudo mv "${DOWNLOAD_LOC}/${1}" "$INSTALL_LOC"
  sudo chmod +x "$INSTALL_LOC/${1}"
  rm "${DOWNLOAD_LOC}/$(basename "$LATEST_CLI_VERSION")"
  request_ssh_pass
  authenticate "$1"
  unset SSH_PASSWD
  node_values "${1}"
  remove_cli_authorization "${1}"
  sudo apt install expect
  echo "> INSTALLATION/UPDATE COMPLETE!"
  echo
}

uninstall() {
  if [ "$1" == "hcloud" ]; then
    service_provider="HETZNER"
  elif [ "$1" == "doctl" ]; then
    service_provider="DIGITAL OCEAN"
  else
    echo "> ${service_provider} UNINSTALL FAILED: ${1} IS NOT A VALID COMMAND"
    echo "  EXITING..."
    echo
    exit 1
  fi
	echo "> UNINSTALLING ${service_provider} NODE SCRIPT"
	echo "  REMOVING STORED IP DATA"
	rm -f "$IP_FILE"
	echo "  REMOVING $service_provider CLI INSTALLATION"
	echo
	remove_cli_authorization "${1}"
	obtain_superuser_permissions
	sudo rm -f "$INSTALL_LOC/${1}"
	sudo rm -rf "$NODE_SCRIPT_HOME"
	sudo apt remove expect
	echo "> UNINSTALL COMPLETE!"
	echo
	exit 0
}

node_values() {
	if [ -f "$NODE_SCRIPT_HOME/node_ip.txt" ]; then
		NODE_IP=$(cat "$NODE_SCRIPT_HOME/node_ip.txt")
	fi
	if [ -f "$NODE_SCRIPT_HOME/node_ssh_port.txt" ]; then
		NODE_SSH_PORT=$(cat "$NODE_SCRIPT_HOME/node_ssh_port.txt")
	fi
	if [ -f "$NODE_SCRIPT_HOME/node_ssh_id.txt" ]; then
		NODE_SSH_ID=$(cat "$NODE_SCRIPT_HOME/node_ssh_id.txt")
	fi
	if [ -f "$NODE_SCRIPT_HOME/node_user.txt" ]; then
		DROPLET_USER=$(cat "$NODE_SCRIPT_HOME/node_user.txt")
	fi
	if [ ! -n "$NODE_IP" ]; then
		obtain_superuser_permissions
		echo "> NO NODE IP SET"
		read -p "  NODE IP: " NODE_IP
		echo
		echo "$NODE_IP" | sudo tee "$NODE_SCRIPT_HOME/node_ip.txt" &>/dev/null
	fi
	if [ ! -n "$NODE_SSH_PORT" ]; then
		obtain_superuser_permissions
		echo "> NO NODE SSH PORT SET"
		read -p "  NODE SSH PORT: " NODE_SSH_PORT
		echo
		echo "$NODE_SSH_PORT" | sudo tee "$NODE_SCRIPT_HOME/node_ssh_port.txt" &>/dev/null
	fi
	if [ ! -n "$NODE_SSH_ID" ]; then
		obtain_superuser_permissions
		echo "> NO NODE SSH IDENTITY FILE PATH SET"
		read -p "  FULL PATH TO SSH IDENTITY FILE [e.g. $HOME/.ssh/id_rsa]: " NODE_SSH_ID
		echo
		echo "$NODE_SSH_ID" | sudo tee "$NODE_SCRIPT_HOME/node_ssh_id.txt" &>/dev/null
	fi
	if [ ! -n "$DROPLET_USER" ]; then
		obtain_superuser_permissions
		echo "> NO NODE USERNAME SET"
		read -p "  NODE USERNAME [nodeadmin]: " DROPLET_USER
		echo
		echo "$DROPLET_USER" | sudo tee "$NODE_SCRIPT_HOME/node_user.txt" &>/dev/null
	fi
}

# Function to escape special characters in a string
escape_string() {
  local input="$1"
  local escaped=""

  # Iterate over each character in the string
  for (( i=0; i<${#input}; i++ )); do
    char="${input:i:1}"
    case "$char" in
      '!'|'$'|'&'|'*'|'('|')'|'['|']'|'{'|'}'|'\\')
        escaped+="\\$char"
        ;;
      *)
        escaped+="$char"
        ;;
    esac
  done

  echo "$escaped"
}

connect() {
	node_values
	SSH_PASSWD=$(escape_string "$SSH_PASSWD")
	if ! expect -c "spawn ssh -i ${NODE_SSH_ID} ${DROPLET_USER}@${NODE_IP} -p ${NODE_SSH_PORT};expect \"Enter passphrase\";send \"${SSH_PASSWD}\r\";interact"; then
		echo -e "${C_INDIANRED1}> ${F_UNDERLINED}SSH CONNECTION FAILED!"
		echo "  EXITING..."
		echo -e "${NO_FORMAT}"
		exit 1
	fi
}

echo -e "${C_DEEPSKYBLUE3}${F_BOLD}"
cat <<EOF
  ###########################################
  # SSPAGHETTY DIGITAL OCEAN NODE CONNECTOR #
  ###########################################

  v0.5 by buzzgreyday (aka. hgtp_Michael)
  -------------------------------------------
EOF

# Example process to run (replace with your actual command)
example_process() {
    sleep 10 # Simulate a process running for 10 seconds
}

echo -e "${NO_FORMAT}"
case "${1}" in
"uninstall") uninstall "${2}";;
"install")
	if check_network_connection; then
		install_cli "${2}"
	else
		echo -e "${C_INDIANRED1}> ${F_UNDERLINED}NO INTERNET CONNECTION!"
		echo "  EXITING..."
		echo
		echo -e "${NO_FORMAT}"
		exit 1
	fi
	;;
"connect")
	if check_network_connection; then
		request_ssh_pass
		authenticate "${2}"
		check_ip "${2}"
		connect
		unset SSH_PASSWD
		remove_cli_authorization "${2}"
	else
		echo -e "${C_INDIANRED1}> ${F_UNDERLINED}NO INTERNET CONNECTION!"
		echo "  EXITING..."
		echo -e "${NO_FORMAT}"
		exit 1
	fi
	;;
*)
	echo -e "${C_INDIANRED1}> ${F_UNDERLINED}NOT A VALID COMMAND!"
	echo -e "${NO_FORMAT}"
	exit 1
	;;
esac
